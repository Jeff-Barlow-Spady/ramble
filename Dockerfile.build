FROM golang:1.23-bullseye

# Install system dependencies
RUN apt-get update && apt-get install -y \
    cmake \
    build-essential \
    libx11-dev \
    libxrandr-dev \
    libxinerama-dev \
    libxcursor-dev \
    libxi-dev \
    libgl1-mesa-dev \
    xorg-dev \
    portaudio19-dev \
    libasound2-dev \
    libayatana-appindicator3-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /build

# Clone whisper.cpp and build it
RUN git clone --depth=1 https://github.com/ggerganov/whisper.cpp.git && \
    cd whisper.cpp && \
    mkdir -p build && \
    cd build && \
    cmake -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_SHARED_LIBS=ON \
          -DWHISPER_BUILD_EXAMPLES=OFF \
          -DWHISPER_BUILD_TESTS=OFF \
          -DWHISPER_BUILD_TOOLS=OFF \
          .. && \
    cmake --build . --parallel && \
    cd /build

# Copy the application source code
COPY . /app
WORKDIR /app

# Prepare library and include directories
RUN mkdir -p libs/include libs/lib && \
    cp /build/whisper.cpp/include/whisper.h libs/include/ && \
    cp /build/whisper.cpp/ggml/include/ggml.h libs/include/ && \
    cp /build/whisper.cpp/ggml/include/ggml-alloc.h libs/include/ && \
    cp /build/whisper.cpp/build/src/libwhisper.so libs/lib/

# Build the application
ENV CGO_ENABLED=1
ENV CGO_CFLAGS="-I/app/libs/include"
ENV CGO_LDFLAGS="-L/app/libs/lib -lwhisper"
ENV LD_LIBRARY_PATH="/app/libs/lib"

RUN go build -v -tags=whisper_go -o ramble ./cmd/ramble

# This is the default command that's run when the container starts
CMD ["/app/ramble"]