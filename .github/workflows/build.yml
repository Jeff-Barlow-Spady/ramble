name: Build Ramble Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

env:
  # Define model URLs centrally
  MODEL_SMALL_URL: "https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-small.bin"
  MODEL_TINY_URL: "https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-tiny.bin"
  MODEL_SMALL_NAME: "ggml-small.bin"
  MODEL_TINY_NAME: "ggml-tiny.bin"
  # Define Go version centrally
  GO_VERSION: '1.21'
  # Define whisper.cpp version to use
  WHISPER_VERSION: 'v1.5.2'

jobs:
  build-whisper-library:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux-amd64
          - os: windows-latest
            platform: windows-amd64
          - os: macos-latest
            platform: darwin-amd64

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install Build Dependencies (Linux)
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install -y cmake build-essential

    - name: Install Build Dependencies (macOS)
      if: runner.os == 'macOS'
      run: brew install cmake

    - name: Clone Whisper.cpp
      run: |
        git clone --depth 1 --branch ${{ env.WHISPER_VERSION }} https://github.com/ggerganov/whisper.cpp.git whisper-build

    - name: Configure and Build (Unix)
      if: runner.os != 'Windows'
      run: |
        cd whisper-build
        mkdir -p build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DWHISPER_BUILD_EXAMPLES=OFF -DWHISPER_BUILD_TESTS=OFF
        cmake --build . --config Release --target whisper

    - name: Configure and Build (Windows)
      if: runner.os == 'Windows'
      run: |
        cd whisper-build
        mkdir -p build
        cmake -S . -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DWHISPER_BUILD_EXAMPLES=OFF -DWHISPER_BUILD_TESTS=OFF
        cmake --build build --config Release --target whisper

    - name: Prepare Artifact Directory
      run: |
        mkdir -p vendor/whisper/include
        mkdir -p vendor/whisper/lib

    - name: Copy Headers
      run: cp whisper-build/whisper.h vendor/whisper/include/

    - name: Copy Library (Linux/macOS)
      if: runner.os == 'Linux' || runner.os == 'macOS'
      run: cp whisper-build/build/libwhisper.a vendor/whisper/lib/

    - name: Copy Library (Windows)
      if: runner.os == 'Windows'
      run: cp whisper-build/build/Release/whisper.lib vendor/whisper/lib/

    - name: Upload Whisper Vendor Artifact
      uses: actions/upload-artifact@v4
      with:
        name: whisper-vendor-${{ matrix.platform }}
        path: vendor/whisper

  build-app:
    needs: build-whisper-library
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux-amd64
            output_name: ramble
          - os: windows-latest
            platform: windows-amd64
            output_name: ramble.exe
          - os: macos-latest
            platform: darwin-amd64
            output_name: ramble

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download Whisper Vendor Artifact
      uses: actions/download-artifact@v4
      with:
        name: whisper-vendor-${{ matrix.platform }}
        path: vendor/whisper

    - name: Set up Build Environment (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "CGO_ENABLED=1" >> $GITHUB_ENV
        echo "CGO_CFLAGS=-I$(pwd)/vendor/whisper/include" >> $GITHUB_ENV
        echo "CGO_LDFLAGS=-L$(pwd)/vendor/whisper/lib -lwhisper" >> $GITHUB_ENV
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          echo "CGO_LDFLAGS=-L$(pwd)/vendor/whisper/lib -lwhisper -framework Accelerate" >> $GITHUB_ENV
        fi

    - name: Set up Build Environment (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        echo "CGO_ENABLED=1" >> $GITHUB_ENV
        echo "CGO_CFLAGS=-I$(pwd)/vendor/whisper/include" >> $GITHUB_ENV
        echo "CGO_LDFLAGS=-L$(pwd)/vendor/whisper/lib -lwhisper" >> $GITHUB_ENV

    - name: Build Application
      run: go build -tags=whisper_go -o ${{ matrix.output_name }} ./cmd/ramble

    - name: Upload Application Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ramble-${{ matrix.platform }}
        path: ${{ matrix.output_name }}

  release:
    needs: build-app
    if: github.event_name == 'release' && github.event.action == 'created'
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - platform: linux-amd64
            output_archive: ramble-linux-amd64.tar.gz
            archive_command: tar czvf
          - platform: windows-amd64
            output_archive: ramble-windows-amd64.zip
            archive_command: zip -r
          - platform: darwin-amd64
            output_archive: ramble-macos-amd64.tar.gz
            archive_command: tar czvf

    steps:
    - name: Download Application Artifact
      uses: actions/download-artifact@v4
      with:
        name: ramble-${{ matrix.platform }}
        path: ./release-staging

    - name: Download Tiny Model
      run: |
        mkdir -p ./release-staging/models
        curl -L -o ./release-staging/models/${{ env.MODEL_TINY_NAME }} ${{ env.MODEL_TINY_URL }}

    - name: Create Release Archive
      working-directory: ./release-staging
      run: ${{ matrix.archive_command }} ../${{ matrix.output_archive }} .

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./${{ matrix.output_archive }}
        asset_name: ${{ matrix.output_archive }}
        asset_content_type: application/octet-stream