name: Build Ramble Application

on:
  push:
    branches: [ main, working ]
  pull_request:
    branches: [ main, working ]
  release:
    types: [ created ]
  workflow_dispatch:  # Allow manual triggering of the workflow

env:
  # Define model URLs centrally
  MODEL_SMALL_URL: "https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-small.bin"
  MODEL_TINY_URL: "https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-tiny.bin"
  MODEL_SMALL_NAME: "ggml-small.bin"
  MODEL_TINY_NAME: "ggml-tiny.bin"
  # Define Go version centrally
  GO_VERSION: '1.21' # Use a stable Go version

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'  # Properly check out submodules

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake build-essential \
          libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev \
          libgl1-mesa-dev xorg-dev \
          portaudio19-dev libasound2-dev libayatana-appindicator3-dev

    - name: Validate Build Scripts
      run: |
        chmod +x build-simple.sh run-simple.sh
        ls -la third_party/whisper.cpp
        git submodule status

    - name: Build Application
      run: |
        ./build-simple.sh
        ls -la
        # Verify binary and libraries exist
        file ./ramble
        file ./libwhisper.so

    - name: Prepare Release Package
      run: |
        mkdir -p ./release

        # Copy binary and libraries
        cp ./ramble ./release/
        cp ./*.so ./release/ || true

        # Create launcher script
        cp ./run-simple.sh ./release/run.sh

        # Download model for testing
        mkdir -p ./release/models
        curl -L -o ./release/models/${{ env.MODEL_TINY_NAME }} ${{ env.MODEL_TINY_URL }}
        curl -L -o ./release/models/${{ env.MODEL_SMALL_NAME }} ${{ env.MODEL_SMALL_URL }}

        # Create the archive
        tar -czvf ramble-linux-amd64.tar.gz -C ./release .

    - name: Upload Application Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ramble-linux-amd64
        path: ./release/ramble

    - name: Upload Libraries Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ramble-libs
        path: ./release/*.so

    - name: Upload Package Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ramble-linux-package
        path: ./ramble-linux-amd64.tar.gz

    # Only when this is a release
    - name: Upload Release Asset (Linux)
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./ramble-linux-amd64.tar.gz
        asset_name: ramble-linux-amd64.tar.gz
        asset_content_type: application/gzip