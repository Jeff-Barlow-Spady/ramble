name: Build Ramble Application

on:
  push:
    branches: [ main, working ]
  pull_request:
    branches: [ main, working ]
  release:
    types: [ created ]
  workflow_dispatch:  # Allow manual triggering of the workflow

env:
  # Define model URLs centrally
  MODEL_SMALL_URL: "https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-small.bin"
  MODEL_TINY_URL: "https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-tiny.bin"
  MODEL_SMALL_NAME: "ggml-small.bin"
  MODEL_TINY_NAME: "ggml-tiny.bin"
  # Define Go version centrally
  GO_VERSION: '1.21' # Use a stable Go version

jobs:
  docker-build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'  # Properly check out submodules

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker Image
      run: |
        docker build -t ramble-builder -f Dockerfile.build .

    - name: Extract Build Artifacts
      run: |
        # Create a temporary container
        CONTAINER_ID=$(docker create ramble-builder)

        # Create directory
        mkdir -p ./dist

        # Extract the binary
        docker cp $CONTAINER_ID:/app/ramble ./dist/

        # Extract required libraries
        docker cp $CONTAINER_ID:/usr/local/lib/libwhisper.so ./dist/
        docker cp $CONTAINER_ID:/usr/local/lib/libggml.so ./dist/ || true
        docker cp $CONTAINER_ID:/usr/local/lib/libggml-base.so ./dist/ || true
        docker cp $CONTAINER_ID:/usr/local/lib/libggml-cpu.so ./dist/ || true

        # Remove the temporary container
        docker rm $CONTAINER_ID

        # List extracted files
        ls -la ./dist

    - name: Prepare Release Package
      run: |
        mkdir -p ./release

        # Copy binary and libraries
        cp ./dist/ramble ./release/
        cp ./dist/*.so ./release/ || true

        # Create launcher script
        cat > ./release/run.sh << 'EOL'
#!/bin/bash
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
export LD_LIBRARY_PATH="$SCRIPT_DIR:$LD_LIBRARY_PATH"
"$SCRIPT_DIR/ramble" "$@"
EOL
        chmod +x ./release/run.sh

        # Download model for testing
        mkdir -p ./release/models
        curl -L -o ./release/models/${{ env.MODEL_TINY_NAME }} ${{ env.MODEL_TINY_URL }}
        curl -L -o ./release/models/${{ env.MODEL_SMALL_NAME }} ${{ env.MODEL_SMALL_URL }}

        # Create the archive
        tar -czvf ramble-linux-amd64.tar.gz -C ./release .

    - name: Upload Application Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ramble-linux-amd64
        path: ./release/ramble

    - name: Upload Libraries Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ramble-libs
        path: ./release/*.so

    - name: Upload Package Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ramble-linux-package
        path: ./ramble-linux-amd64.tar.gz

    # Only when this is a release
    - name: Upload Release Asset (Linux)
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./ramble-linux-amd64.tar.gz
        asset_name: ramble-linux-amd64.tar.gz
        asset_content_type: application/gzip