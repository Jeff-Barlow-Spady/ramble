name: Build Ramble Linux Package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'  # We need the whisper.cpp submodule

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Linux Package
      run: |
        # Create Dockerfile.linux with the same content as in the docker-build-linux.sh script
        cat > Dockerfile.linux << 'EOF'
        # === Stage 1: Base Dependencies ===
        FROM golang:1.23-bookworm AS base
        WORKDIR /app

        # Install Linux build dependencies
        RUN apt-get update && apt-get install -y --no-install-recommends \
            build-essential \
            cmake \
            git \
            curl \
            tar \
            file \
            # Runtime deps for whisper.cpp/Go app (needed for linking/packaging)
            libsdl2-dev \
            portaudio19-dev \
            # AppImage deps
            libfuse3-dev \
            libglib2.0-dev \
            # UI deps
            libayatana-appindicator3-dev \
            libgtk-3-dev \
            pkg-config \
            && rm -rf /var/lib/apt/lists/*

        # === Stage 2: Build whisper.cpp for Linux ===
        FROM base AS whisper-builder
        WORKDIR /app/whisper.cpp-build

        # Clone whisper.cpp
        RUN git clone --depth 1 https://github.com/ggerganov/whisper.cpp.git .

        # Build whisper.cpp shared libraries for Linux
        RUN cmake -B build -DWHISPER_BUILD_GO_BINDINGS=1 -DWHISPER_BUILD_SHARED=1 .
        RUN cmake --build build --config Release --parallel $(nproc)

        # === Stage 3: Build Go App and Package for Linux ===
        FROM base AS builder
        WORKDIR /app

        # Copy source code
        COPY . .

        # Create libs directory
        RUN mkdir -p /app/libs/linux

        # Copy built Linux libraries from whisper builder stage
        COPY --from=whisper-builder /app/whisper.cpp-build/build/src/libwhisper.so* /app/libs/linux/
        COPY --from=whisper-builder /app/whisper.cpp-build/build/ggml/src/libggml*.so* /app/libs/linux/

        # Set environment for build
        ENV CGO_ENABLED=1
        ENV GOOS=linux
        ENV GOARCH=amd64
        ENV WHISPER_CPP_DIR=/app/whisper.cpp-build
        ENV LIBRARY_PATH=/app/libs/linux
        ENV LD_LIBRARY_PATH=/app/libs/linux
        ENV C_INCLUDE_PATH=/app/whisper.cpp-build/include:/app/whisper.cpp-build/ggml/include
        ENV CGO_CFLAGS="-I/app/whisper.cpp-build/include -I/app/whisper.cpp-build/ggml/include"
        ENV CGO_LDFLAGS="-L/app/libs/linux"

        # Create output directory structure
        RUN mkdir -p /app/dist/linux-pkg/libs && \
            mkdir -p /app/dist/linux-pkg/models

        # Build with Go whisper bindings tag and rpath
        RUN echo "Building Linux binary..." && \
            go build -v -tags=whisper_go \
            -ldflags="-s -w -extldflags '-Wl,-rpath,\$ORIGIN/libs'" \
            -o /app/dist/linux-pkg/ramble ./cmd/ramble

        # --- Package Linux ---
        # Copy libraries to package directory
        RUN cp /app/libs/linux/* /app/dist/linux-pkg/libs/

        # Download models
        ARG MODEL_TINY_URL="https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-tiny.bin"
        ARG MODEL_TINY_NAME="ggml-tiny.bin"
        RUN curl -L -o /app/dist/linux-pkg/models/${MODEL_TINY_NAME} ${MODEL_TINY_URL}

        # Copy README
        RUN cp README.md /app/dist/linux-pkg/

        # Create Linux run script
        RUN echo '#!/bin/bash' > /app/dist/linux-pkg/run.sh && \
            echo 'SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"' >> /app/dist/linux-pkg/run.sh && \
            echo 'export LD_LIBRARY_PATH="$SCRIPT_DIR/libs:$LD_LIBRARY_PATH"' >> /app/dist/linux-pkg/run.sh && \
            echo '"$SCRIPT_DIR/ramble" "$@"' >> /app/dist/linux-pkg/run.sh && \
            chmod +x /app/dist/linux-pkg/run.sh

        # Create Linux tar.gz package
        RUN cd /app/dist && tar -czf ramble-linux-amd64.tar.gz -C linux-pkg .

        # Final stage just holds the artifacts
        FROM scratch AS final-artifacts
        COPY --from=builder /app/dist /
        EOF

        # Create output directory
        mkdir -p ./dist

        # Build using Docker
        docker buildx build \
          --platform linux/amd64 \
          --output type=local,dest=./dist \
          --target final-artifacts \
          --tag ramble:linux \
          -f Dockerfile.linux .

        # List the generated artifacts for verification
        ls -la ./dist

    - name: Upload Linux Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ramble-linux-amd64
        path: dist/ramble-linux-amd64.tar.gz
        if-no-files-found: error

  release:
    needs: build-linux
    if: github.event_name == 'release' && github.event.action == 'created'
    runs-on: ubuntu-latest
    steps:
    - name: Download Linux Artifact
      uses: actions/download-artifact@v4
      with:
        name: ramble-linux-amd64
        path: ./release-artifacts

    - name: Upload Linux Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./release-artifacts/ramble-linux-amd64.tar.gz
        asset_name: ramble-linux-amd64.tar.gz
        asset_content_type: application/gzip