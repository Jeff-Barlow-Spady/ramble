name: Build Ramble Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

env:
  # Define model URLs centrally
  MODEL_TINY_URL: "https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-tiny.bin"
  MODEL_TINY_NAME: "ggml-tiny.bin"
  # Define Go version centrally
  GO_VERSION: '1.23'

jobs:
  unit-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up embed directory structure
      run: |
        # Create directories needed for embedding tests
        mkdir -p pkg/transcription/embed/binaries/linux-amd64
        mkdir -p pkg/transcription/embed/binaries/darwin-amd64
        mkdir -p pkg/transcription/embed/binaries/windows-amd64
        mkdir -p pkg/transcription/embed/models

        # Create placeholder files needed for testing
        echo '#!/bin/bash' > pkg/transcription/embed/binaries/linux-amd64/whisper
        echo 'echo "This is a placeholder whisper executable"' >> pkg/transcription/embed/binaries/linux-amd64/whisper
        chmod +x pkg/transcription/embed/binaries/linux-amd64/whisper

        # Create macOS placeholder (needed because embed.go references this)
        echo '#!/bin/bash' > pkg/transcription/embed/binaries/darwin-amd64/whisper
        echo 'echo "This is a placeholder whisper executable"' >> pkg/transcription/embed/binaries/darwin-amd64/whisper
        chmod +x pkg/transcription/embed/binaries/darwin-amd64/whisper

        # Create Windows placeholder (needed because embed.go references this)
        echo '#!/bin/bash' > pkg/transcription/embed/binaries/windows-amd64/whisper.exe
        echo 'echo "This is a placeholder whisper executable"' >> pkg/transcription/embed/binaries/windows-amd64/whisper.exe
        chmod +x pkg/transcription/embed/binaries/windows-amd64/whisper.exe

        # Create placeholder model files
        echo "Dummy tiny model for testing" > pkg/transcription/embed/models/tiny.bin
        echo "Dummy small model for testing" > pkg/transcription/embed/models/small.bin

    - name: Run Go Unit Tests
      run: go test -v ./...

  build-app:
    needs: unit-test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential libasound2-dev libgtk-3-dev

    - name: Set up vendor directory
      run: |
        # Run the setup-vendor.sh script
        chmod +x ./scripts/setup-vendor.sh
        ./scripts/setup-vendor.sh

    - name: Prepare embed directory
      run: |
        # Create directories needed for embedding
        mkdir -p pkg/transcription/embed/binaries/linux-amd64
        mkdir -p pkg/transcription/embed/binaries/darwin-amd64
        mkdir -p pkg/transcription/embed/binaries/windows-amd64
        mkdir -p pkg/transcription/embed/models

        # Create placeholder files
        echo '#!/bin/bash' > pkg/transcription/embed/binaries/linux-amd64/whisper
        echo 'echo "This is a placeholder whisper executable"' >> pkg/transcription/embed/binaries/linux-amd64/whisper
        chmod +x pkg/transcription/embed/binaries/linux-amd64/whisper

        # Create macOS placeholder (needed because embed.go references this)
        echo '#!/bin/bash' > pkg/transcription/embed/binaries/darwin-amd64/whisper
        echo 'echo "This is a placeholder whisper executable"' >> pkg/transcription/embed/binaries/darwin-amd64/whisper
        chmod +x pkg/transcription/embed/binaries/darwin-amd64/whisper

        # Create Windows placeholder (needed because embed.go references this)
        echo '#!/bin/bash' > pkg/transcription/embed/binaries/windows-amd64/whisper.exe
        echo 'echo "This is a placeholder whisper executable"' >> pkg/transcription/embed/binaries/windows-amd64/whisper.exe
        chmod +x pkg/transcription/embed/binaries/windows-amd64/whisper.exe

        # Create placeholder model files
        echo "Dummy tiny model for testing" > pkg/transcription/embed/models/tiny.bin
        echo "Dummy small model for testing" > pkg/transcription/embed/models/small.bin

    - name: Build application
      run: |
        export LD_LIBRARY_PATH=$(pwd)/vendor/whisper/lib:$LD_LIBRARY_PATH
        export CGO_CFLAGS="-I$(pwd)/vendor/whisper/include"
        export CGO_LDFLAGS="-L$(pwd)/vendor/whisper/lib"
        go build -tags=whisper_go -o ramble ./cmd/ramble

    - name: Upload application artifact
      uses: actions/upload-artifact@v4
      with:
        name: ramble-linux-amd64
        path: ramble

  release:
    needs: build-app
    if: github.event_name == 'release' && github.event.action == 'created'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Download application artifact
      uses: actions/download-artifact@v4
      with:
        name: ramble-linux-amd64
        path: ./release-staging

    - name: Download tiny model
      run: |
        mkdir -p ./release-staging/models
        curl -L -o ./release-staging/models/${{ env.MODEL_TINY_NAME }} ${{ env.MODEL_TINY_URL }}

    - name: Create release directory structure
      run: |
        # Create necessary directories
        mkdir -p ./release-staging/libs

        # Copy dynamic libraries
        if [ -d "lib" ]; then
          cp lib/*.so* ./release-staging/libs/ || echo "No .so files found in lib directory"
        fi

        # Make sure executable has correct permissions
        chmod +x ./release-staging/ramble

    - name: Create launch script
      run: |
        cat > ./release-staging/ramble.sh << 'EOL'
#!/bin/bash
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
export LD_LIBRARY_PATH="$SCRIPT_DIR/libs:$LD_LIBRARY_PATH"
"$SCRIPT_DIR/ramble" "$@"
EOL
        chmod +x ./release-staging/ramble.sh

    - name: Create tarball
      run: tar czvf ramble-linux-amd64.tar.gz -C ./release-staging .

    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./ramble-linux-amd64.tar.gz
        asset_name: ramble-linux-amd64.tar.gz
        asset_content_type: application/gzip