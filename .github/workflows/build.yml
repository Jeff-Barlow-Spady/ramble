name: Build Ramble Linux Package

on:
  push:
    branches: [ main, correction ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Linux Package
      uses: docker/build-push-action@v5
      with:
        context: .
        file: - # Use Dockerfile.linux created inline
        push: false
        outputs: type=local,dest=./dist
        build-args: |
          GO_VERSION=1.21
        build-contexts: whisper-builder=docker-image://debian:bookworm-slim
        # Create the Dockerfile inline for the build
        inline: |
          # First stage: build whisper.cpp library
          FROM whisper-builder as whisper-builder

          # Install build dependencies
          RUN apt-get update && apt-get install -y \
              build-essential \
              cmake \
              git \
              g++

          # Clone and build whisper.cpp
          WORKDIR /app/whisper.cpp-build
          RUN git clone --depth 1 https://github.com/ggerganov/whisper.cpp.git .

          # Build whisper.cpp with Go bindings and shared libraries
          RUN cmake -B build -DWHISPER_BUILD_GO_BINDINGS=1 -DWHISPER_BUILD_SHARED=1 .
          RUN cmake --build build --config Release --parallel $(nproc)

          # Second stage: build the Go application
          FROM golang:1.21 as builder

          # Install dependencies needed for GUI
          RUN apt-get update && apt-get install -y \
              gcc libasound2-dev libgl1-mesa-dev libxcursor-dev \
              libxi-dev libxinerama-dev libxrandr-dev libxxf86vm-dev \
              xorg-dev libgl1-mesa-dev libx11-dev libxcursor-dev libxi-dev \
              libxinerama-dev libxrandr-dev libxxf86vm-dev

          WORKDIR /app

          # Copy the repository contents
          COPY . .

          # Create necessary directories
          RUN mkdir -p /app/pkg/transcription/embed/binaries/linux-amd64
          RUN mkdir -p /app/pkg/transcription/embed/models
          # Create include directories for whisper and ggml headers
          RUN mkdir -p /app/third_party/whisper.cpp/include
          RUN mkdir -p /app/third_party/whisper.cpp/ggml/include

          # Copy libs directory for easier access
          RUN mkdir -p /app/libs/linux

          # Copy whisper.cpp headers and libraries from the first stage
          COPY --from=whisper-builder /app/whisper.cpp-build/include/whisper.h /app/third_party/whisper.cpp/include/
          COPY --from=whisper-builder /app/whisper.cpp-build/ggml/include/ggml.h /app/third_party/whisper.cpp/ggml/include/

          # Copy all required libraries
          COPY --from=whisper-builder /app/whisper.cpp-build/build/src/libwhisper.so* /app/libs/linux/
          COPY --from=whisper-builder /app/whisper.cpp-build/build/ggml/src/libggml*.so* /app/libs/linux/

          # Copy to embed binaries too for tests
          COPY --from=whisper-builder /app/whisper.cpp-build/build/src/libwhisper.so* /app/pkg/transcription/embed/binaries/linux-amd64/
          COPY --from=whisper-builder /app/whisper.cpp-build/build/ggml/src/libggml*.so* /app/pkg/transcription/embed/binaries/linux-amd64/

          # Create directories for the final package
          RUN mkdir -p /app/dist/linux-pkg/libs && \
              mkdir -p /app/dist/linux-pkg/models

          # Set environment for build
          ENV CGO_ENABLED=1
          ENV GOOS=linux
          ENV GOARCH=amd64
          ENV WHISPER_CPP_DIR=/app/whisper.cpp-build
          ENV LIBRARY_PATH=/app/libs/linux
          ENV LD_LIBRARY_PATH=/app/libs/linux
          ENV C_INCLUDE_PATH=/app/third_party/whisper.cpp/include:/app/third_party/whisper.cpp/ggml/include
          ENV CGO_CFLAGS="-I/app/third_party/whisper.cpp/include -I/app/third_party/whisper.cpp/ggml/include"
          ENV CGO_LDFLAGS="-L/app/libs/linux -lwhisper -lggml"

          # Build with Go whisper bindings tag and rpath
          RUN echo "Building Linux binary..." && \
              go build -v -tags=whisper_go \
              -ldflags="-s -w -extldflags '-Wl,-rpath,\$ORIGIN/libs'" \
              -o /app/dist/linux-pkg/ramble ./cmd/ramble

          # Copy libraries and prepare package
          RUN cp /app/libs/linux/* /app/dist/linux-pkg/libs/ && \
              cp -r /app/assets /app/dist/linux-pkg/ && \
              chmod +x /app/dist/linux-pkg/ramble && \
              cd /app/dist && \
              tar -czf ramble-linux-amd64.tar.gz linux-pkg

          # Stage 3: Create minimal runtime image
          FROM scratch as export
          COPY --from=builder /app/dist /

    - name: Upload Linux Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ramble-linux-amd64
        path: ./dist/ramble-linux-amd64.tar.gz
        if-no-files-found: error

  release:
    needs: build-linux
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
    - name: Download Linux Artifact
      uses: actions/download-artifact@v4
      with:
        name: ramble-linux-amd64
        path: ./dist

    - name: Upload to Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./dist/ramble-linux-amd64.tar.gz