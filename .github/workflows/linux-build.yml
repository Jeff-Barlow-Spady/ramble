name: Linux Build

on:
  push:
    branches: [ build ]
  release:
    types: [ created ]

env:
  MODEL_TINY_URL: "https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-tiny.bin"
  MODEL_TINY_NAME: "ggml-tiny.bin"
  GO_VERSION: '1.23'

jobs:
  simple-build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential libasound2-dev libgtk-3-dev

    - name: Prepare embed directory
      run: |
        # Create directories needed for embedding
        mkdir -p pkg/transcription/embed/binaries/linux-amd64
        mkdir -p pkg/transcription/embed/binaries/darwin-amd64
        mkdir -p pkg/transcription/embed/binaries/windows-amd64
        mkdir -p pkg/transcription/embed/models

        # Create placeholder files
        echo '#!/bin/bash' > pkg/transcription/embed/binaries/linux-amd64/whisper
        echo 'echo "This is a placeholder whisper executable"' >> pkg/transcription/embed/binaries/linux-amd64/whisper
        chmod +x pkg/transcription/embed/binaries/linux-amd64/whisper

        # Create macOS placeholder (needed because embed.go references this)
        echo '#!/bin/bash' > pkg/transcription/embed/binaries/darwin-amd64/whisper
        echo 'echo "This is a placeholder whisper executable"' >> pkg/transcription/embed/binaries/darwin-amd64/whisper
        chmod +x pkg/transcription/embed/binaries/darwin-amd64/whisper

        # Create Windows placeholder (needed because embed.go references this)
        echo '#!/bin/bash' > pkg/transcription/embed/binaries/windows-amd64/whisper.exe
        echo 'echo "This is a placeholder whisper executable"' >> pkg/transcription/embed/binaries/windows-amd64/whisper.exe
        chmod +x pkg/transcription/embed/binaries/windows-amd64/whisper.exe

        # Create placeholder model files
        echo "Dummy tiny model for testing" > pkg/transcription/embed/models/tiny.bin
        echo "Dummy small model for testing" > pkg/transcription/embed/models/small.bin

    - name: Set up vendor directory
      run: |
        # Set up vendor directory for whisper
        mkdir -p vendor/whisper/include
        mkdir -p vendor/whisper/lib

        # Create a minimal stub for the whisper header
        echo "// Stub whisper.h" > vendor/whisper/include/whisper.h

        # Create a stub library for compilation
        echo "// Stub library" > stub.c
        gcc -shared -o vendor/whisper/lib/libwhisper.so stub.c
        ln -s libwhisper.so vendor/whisper/lib/libwhisper.so.1

    - name: Build application
      run: |
        export LD_LIBRARY_PATH=$(pwd)/vendor/whisper/lib:$LD_LIBRARY_PATH
        export CGO_CFLAGS="-I$(pwd)/vendor/whisper/include"
        export CGO_LDFLAGS="-L$(pwd)/vendor/whisper/lib -lwhisper"
        go build -o ramble ./cmd/ramble

    - name: Upload application artifact
      uses: actions/upload-artifact@v4
      with:
        name: ramble-linux-amd64
        path: ramble

  release:
    needs: simple-build
    if: github.event_name == 'release' && github.event.action == 'created'
    runs-on: ubuntu-latest

    steps:
    - name: Download application artifact
      uses: actions/download-artifact@v4
      with:
        name: ramble-linux-amd64
        path: ./release-staging

    - name: Download tiny model
      run: |
        mkdir -p ./release-staging/models
        curl -L -o ./release-staging/models/${{ env.MODEL_TINY_NAME }} ${{ env.MODEL_TINY_URL }}

    - name: Create directory structure
      run: |
        mkdir -p ./release-staging/libs

        # Create launch script
        cat > ./release-staging/ramble.sh << 'EOL'
#!/bin/bash
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
export LD_LIBRARY_PATH="$SCRIPT_DIR/libs:$LD_LIBRARY_PATH"
"$SCRIPT_DIR/ramble" "$@"
EOL
        chmod +x ./release-staging/ramble.sh
        chmod +x ./release-staging/ramble

    - name: Create tarball
      run: tar czvf ramble-linux-amd64.tar.gz -C ./release-staging .

    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./ramble-linux-amd64.tar.gz
        asset_name: ramble-linux-amd64.tar.gz
        asset_content_type: application/gzip